public class AmazonMusic {
    public static void main(String[] args) {
        // Example input
        String music = "1001";
        int k = 1;
        
        // Output the result
        System.out.println(getMaxAlternatingMusic(music, k));  // Expected output: 3
    }

    public static int getMaxAlternatingMusic(String music, int k) {
        int n = music.length();
        
        // Function to calculate the longest alternating substring with a given target pattern
        int longestWithFlips(String target) {
            int left = 0;
            int flips = 0;
            int maxLength = 0;

            for (int right = 0; right < n; right++) {
                // Check if the current character doesn't match the alternating target
                if (music.charAt(right) != target.charAt(right % 2)) {
                    flips++;
                }

                // If flips exceed k, we need to move the left pointer to reduce flips
                while (flips > k) {
                    if (music.charAt(left) != target.charAt(left % 2)) {
                        flips--;
                    }
                    left++;
                }

                // Update the maximum length of the alternating substring
                maxLength = Math.max(maxLength, right - left + 1);
            }

            return maxLength;
        }

        // Check for both alternating patterns: "01" and "10"
        return Math.max(longestWithFlips("01"), longestWithFlips("10"));
    }

    // Helper function to generate the alternating string pattern
    private static String generateTarget(int n, char start) {
        StringBuilder target = new StringBuilder();
        for (int i = 0; i < n; i++) {
            target.append((char) ((i % 2 == 0) ? start : (start == '0' ? '1' : '0')));
        }
        return target.toString();
    }
}
