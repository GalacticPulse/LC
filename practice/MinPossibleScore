import java.util.HashMap;

public class MinSubArray {
    public static int findMinSubArrayWithElements(int[] arr, int n, int a, int b) {
        // Initialize variables
        int ans = n + 1; // Initialize to a large value (worst case)
        HashMap<Integer, Integer> map = new HashMap<>();
        int i = 0;

        // Sliding window loop
        for (int j = 0; j < n; j++) {
            // Add current element to the map and update its count
            map.put(arr[j], map.getOrDefault(arr[j], 0) + 1);

            // Check if both 'a' and 'b' exist in the current window
            if (map.getOrDefault(a, 0) > 0 && map.getOrDefault(b, 0) > 0) {
                ans = Math.min(ans, map.size());  // Update the answer
            }

            // Shrink the window from the left to minimize the window size
            while (map.getOrDefault(a, 0) > 0 && map.getOrDefault(b, 0) > 0) {
                ans = Math.min(ans, map.size());  // Update the answer again

                // Remove or decrement the count of arr[i] from the map
                map.put(arr[i], map.get(arr[i]) - 1);
                if (map.get(arr[i]) == 0) {
                    map.remove(arr[i]);  // Remove the element if its count becomes 0
                }
                i++;  // Move the left pointer of the window
            }
        }

        // If no valid subarray was found, return a large value (n + 1), otherwise return the answer
        return ans == n + 1 ? -1 : ans;  // Return -1 if no subarray found
    }

    public static void main(String[] args) {
        // Example usage
        int[] arr = {1, 2, 2, 1, 3, 4, 5};
        int n = arr.length;
        int a = 1;
        int b = 4;

        // Find and print the minimum subarray length
        int result = findMinSubArrayWithElements(arr, n, a, b);
        System.out.println("Minimum subarray length: " + result);
    }
}
